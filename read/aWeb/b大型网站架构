架构师
	共同参与架构，不要只有架构师一个人拥有架构
	我的问题表述为我们的问题

如何打造高可用，高性能，易扩展，可伸缩且安全的网站.
大型网站主要挑战来自于庞大的用户，高并发的访问和海量的数据.P级数据，亿级用户.

网站架构演进
	单一服务器->文件服务器+应用服务器+数据库服务器->＋缓存服务器+本地缓存+主从数据库服务器->集群
	二八定律，哪里是瓶颈解决哪里	
		缓存服务器集群
		服务器集群，实现可伸缩集群架构
		数据库主从热备份，数据库读写分离，数据库读写分离应当对应用透明
		加快网站访问速度
			CDN和反向代理原理都是缓存，是用户就近访问
	持续增长，分布式
		分布式数据库
			当单表数据规模非常大时才使用。更常用的是业务分库，不同业务数据库部署到不同服务器上.
	
	进一步使用Nosql和搜索引擎技术应对非关系数据库和非数据库查询
	业务拆分成不同产品线
	大型网站演进是业务成就了技术
	技术是解决业务问题的，而业务问题可以通过业务的手段解决


网站架构模式
	分层，横向维度上切分,网站很小时就应该采用分层结构。
	分割，纵向业务分割，模块化
	分布式
		模块分布式部署，通过远程调用进行依赖访问
	集群
	缓存
		缓存无处不在，将热点数据缓存在离计算最近的地方。
	异步
		典型模式是生产者消费者模式，采用异步队列通信
	冗余
		热备份
		冷备份
	自动化
		版本控制
		发布
		测试
		running
			监控
			报警
			失效转移，故障恢复，降级,资源分配


大型网站核心要素
	性能
		从浏览器前端到服务器后端各个环节都可以优化
	可用性
		互相冗余备份
		负载均衡
	伸缩性
	功能扩展性
		可伸缩架构主要手段有事件驱动架构和分布式服务
	安全



瞬时响应
	性能测试是优化的前提
	前端性能优化
		浏览器优化
			减少http请求，主要手段合并
			要求浏览器缓存
			启用压缩可节省带宽
			注意CSS和js位置安排
			避免每次都使用cookie，精简cookie数据，并独立域名限制cookie作用域
		CDN
		反向代理

	服务器性能优化－>缓存，集群，异步
		优先使用缓存优化，缓存是一个内存hash表.缓存是提高热点数据的读取性能的，频繁修改不适合.
		使用消息队列将调用和请求异步化
		对于网站而言，不管有没有进行多线程编程，由于用户的请求是并发的，因此代码都会被多线程执行
		存储优化
			RAID实现并发读写和数据备份
			hdfs
	
	
高可用架构/先求生存，再求发展
	Session服务器集群
		http是无状态协议，通过cookie和session机制管理状态。独立部署Session服务器集群将应用服务器的状态分离。
		无状态的应用服务器和有状态的Session服务器分离
	可复用服务模块独立分布式部署
	服务降级
		拒绝部分服务
		暂时关闭不重要功能
	高可用数据CAP
		可用，持久下一致性考量
	不允许没有监控的系统上线

	
伸缩性
	不改变软硬件设计，仅仅改变部署服务器数量就可以扩大或缩小服务能力
	不同功能分离部署
	同一功能集群部署
	负载均衡实现手段
		Http重定向	
		DNS解析
		Ip负载均衡
		链路层修改MAC均衡
	负载均衡算法
		源地址散列
		轮询->加权轮询->随机
		最少连接
	
	分布式缓存一致性hash算法
		hash环，服务器位于hash环上某个位置,hash后按顺时针方向找最近的服务器
		传言:计算机领域的任何问题都可以通过增加一个虚拟层解决		
		将一个物理节点虚拟为多个虚拟节点加入hash环
	
	数据库主从读写分离，分库，分表.


可扩展架构
	事件驱动架构,低耦合模块之间传输事件消息完成合作.
		常见的是使用分布式队列实现的生产者消费者模式，消息队列是发布订阅模式.
		队列部署在专门服务器上，通过远程过程调用进行get/put.
		
	可扩展数据结构
		Nosql解决方案
			列族	

	构建开放平台，引入第三方开发者，构建生态
	API
		RESTful
		WebService
		RPC
	

安全
	XSS 利用客户端对服务器的信任，服务器中的恶意代码下载到本地在本地执行
		反射型
			点击恶意链接
		持久型
			恶意脚本都存储在服务器中(如服务器没有输入内容校验，转义，恶意脚本与正常内容混合存入数据库)，当用户访问网站时，数据库恶意内容被提取参与构造html则恶意脚本会被浏览器执行到.
	
	注入攻击
	CSRF 利用服务器对客户端的信任,在用户不知情下窃取用户身份信息，利用用户身份执行违背用户意愿的操作
	
	安全策略
		error code有专门页面不要回显
		html发布时去注释
		防止上传恶意文件
		防止路径遍历
		过滤，检查输入输出
		ModSecurity
			open source web应用防火墙
		漏洞扫描，模拟黑客攻击
		关键信息加密保存,如密码,不保存明文

	信息过滤与反垃圾
		黑白名单
		布隆过滤器
		分类聚类关联规则算法
