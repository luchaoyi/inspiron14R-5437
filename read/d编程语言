<代码的未来>
c2:
元编程:meta,对自己的描述,元编程，写程序的程序，用程序来写程序(如,遗传编程).
	根本没有什么元编程，只有编程而已.
	
反射:c等语言中数据结构等信息经编译后信息就丢失了。Java等语言中还保留这样信息，对象运行时可以获取自身的信息(类，方法等)的行为称为反射,照镜子反射身影，
LISP规则:
	符号会解释为变量，求值出绑定的变量
	符号以外原子，则求值出其自身值。如:123求值123,"abc"求值abc
	表(函数名 参数...)求值，第一个符号为函数名，剩余元素为参数。函数名部分分为函数，特殊形式，宏三种.
		函数名:函数被调用
		特殊形式:被特殊对待的形式,如(setq a 128)，如果setq为函数则a会被求值得到a绑定的量，但这里a是变量名,这是Lisp直接定义好的规则,被特殊对待的形式.
		宏:
LISP宏:
CL-USER> (defmacro square2(x)
	   (list '* x x))
SQUARE2
CL-USER> (macroexpand '(square2 a))
(* A A)
T
CL-USER> (macroexpand '(square2 2))
(* 2 2)
CL-USER> (square2 2) #进行求值时，首先将2作为参数对宏本身进行求值返回(* 2 2),然后将以表形式返回的代码嵌入到宏调用位置进行求值. 	
4
CL-USER> (eval (macroexpand '(square2 2))) #macroexpand返回了(* 2 2),代码加工过程，eval对'(* 2 2)求值. eval 与 quote是互逆操作.
4
CL-USER> (eval '(macroexpand '(square2 2)))
(* 2 2)
T

宏是一种获取参数，加工，再嵌入的技术，可以对构成程序的表操作(代码即数据),改写程序本身.CommonLisp的面向对象机制是通过宏等手段仅由语言自身完成的，不是语言设计时包含的。

LISP quote:LISP的理念是代码即数据，(quote x)得到x,而不是x的求值.x等价eval(quote(x))
	M是图灵机(一个算法),<M>=quote(M)(或'M),图灵机的编码(描述),eval('M)=M.
	M'(quote(M)),将图灵机M的编码<M>，输入到图灵机M'上，可以在M'上运行M，代码即数据


垃圾回收:
	跟踪回收:扫描对象判断生死
	引用计数:对象引用计数为0时，可以回收.
	GC大统一：任何GC算法都是引用计数和跟踪回收思路的组合。
	例子:
	分代回收:大部分对象会在短时间内成为垃圾，若存活一段时间的对象则往往有较长的寿命.分代回收将对象按产生时间分代，每次扫描新生代，偶尔扫描老生代.

异常处理:
	java每个方法都需要显式声明自己可能产生什么类型的异常(throws).
	
闭包:将局部变量这一环境封闭起来的结构.被封闭起来的变量的寿命与封闭它的函数对象寿命相等.
def f():
    i=0
    def f_():
        j=i+1
        print j
    return f_
f0
Out[53]: <function __main__.f_>
In[53] : f0()
1
函数f的局部变量i没有随着f调用后结束生命,从属于外部作用域的局部变量，被函数对象f_给封闭在里面了。

池化:先創建好，然後重復利用的技術。(进程池，数据库连接池)	
序列化:socket只能传输字节序列,因此传输非文本数据时，传输前需要将数据转换为字节序列,转换称为序列化.
事件驱动编程:时间->时间循环->callback
-------------------------------------------------------
<七周七语言>
Ruby:
	纯面向对象，all is 对象.
	鸭子类型. 像鸭子一样叫，像鸭子一样走路，那么它就是鸭子.


Io:
	原型语言.(Io,javascript...),对象是对象的复制品，不是类的复制,对象is原型
	对象是一组槽，clone other 对象 create 对象，被clone对象是父对象.发送消息获取对象槽
	all is 对象.不是实例化类，而是复制原型对象。对象无法响应的消息会发送给原型.
	
	
Prolog:
	逻辑编程语言，基本构建单元
		事实:关于世界的基本断言.(pig like 泥巴)
		规则:(if A is pig,A then A like 泥巴)
		查询:来自真实世界的问题(A like 泥巴 ?)
	通过事实，规则推导查询结果.	
	Prolog词语以小写字母开头的是一个原子，类似Ruby符号的固定值，不可改变;词语以大写字母开头是一个变量
	
likes(a,b).
likes(a,c).
likes(d,e). 事实,a likes b
friend(X,Y):- \+(X = Y),likes(X,Z),likes(Y,Z). 规则,如果 X!=Y且X likes Z且Y likes Z :- friend(X,Y) is yes 
Prolog不是编写算法解决问题，而是通过如实描述真实世界，来呈现计算机可以设法解决的问题.
-------------------------------------------------------
<self expressive code>:
面向对象:
	特性 封装，继承，多态
	面向对象主张一切都是对象
		具体的和抽象的(状态，动作，迁移;类，注解，代码，方法，基本类型)都是对象
	设计基本原则
		单一职责 一个类实现一种职责，将需求细分到不同的类中(小而美),并使用AOP补充OOP。
		开放封闭 对扩展开放，对变更封闭.增加功能时，尽量采用添加新的方法扩展，而不是在某个方法中修改代码.
		里式代换 任何一个子类应该能够替换父类
		接口分离 
		依赖倒置 上层不依赖下层;抽象不依赖实现,实现应依赖抽象.
		迪米特 
		不要重复你自己
		
java注解:
	Java 1.5 introduce ,use to help code compiler and run 

java反射机制:
	反射就是通过名称,返回java语言对象,如类，方法，域或注解等.java.lang.reflect
	
英语:
	使用时态
	使用成对词语,方便联想
		e.g. import/export width/height ...
	前缀，扩展
		prev/curr/next 前一个，当前，后一个(previous,current,next)
	    on~ 表示响应某个动作

软件泛型
	面向过程
	面向对象
	面向构件
		构件是基础设施，更大可变粒度上的软件模型
		构件通过代理直接调用其它对象或构建来复用功能，而不是通过继承
		构件利用组装来构建系统

