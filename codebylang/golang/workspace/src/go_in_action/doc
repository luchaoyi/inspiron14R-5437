Go 开发者使用组合(composition)设计模式,只需简单地将一个类型嵌入到另一个类型,就能复用所有的功能
Go 语言还具有独特的接口实现机制,允许用户对行为进行建模

数组
	数组是一个长度固定的数据类型
slice
	切片是一个引用类型，底层是一个数组。切片len的可变是表面的，底层的数组cap没有变.
	如果切片的底层数组没有足够的可用容量, append 函数会创建一个新的底层数组,将被引用的现有的值复制到新数组里,再追加新的值.
map
	映射是无序的集合,意味着没有办法预测键值对被返回的顺序
	

将函数与接收者的类型绑在一起。如果一个函数有接收者,这个函数就被称为方法.
值接收者和指针接收者
	可以使用指针来调用使用值接收者声明的方法。Go 编译器为了支持这种方法调用，指针被解引用为值,这样就符合了值接收者的要求。
	值接收者使用值的副本来调用方法,而指针接受者使用实际值来调用方法。
	也可以使用一个值来调用使用指针接收者声明的方法。	
	
	
方法集定义了一组关联到给定类型的值或者指针的方法。定义方法时使用的接收者的类型决定了这个方法是关联到值,还是关联到指针,还是两个都关联
T 类型的值的方法集只包含值接收者声明的方法。而指向 T 类型的指针的方法集既包含值接收者声明的方法,也包含指针接收者声明的方法。
为什么会有这种限制?事实上,编译器并不是总能自动获得一个值的地址,因为不是总能获取一个值的地址,所以值的方法集只包括了使用值接收者实现的方法.虽然可以使用值来调用使用指针接受者声明的方法


并发
	如果需要顺序访问一个整型变量或者一段代码, atomic 和 sync 包里的函数提供了很好的解决方案.
	可以使用通道,通过发送和接收需要共享的资源,在 goroutine 之间做同步.
	




	
	
