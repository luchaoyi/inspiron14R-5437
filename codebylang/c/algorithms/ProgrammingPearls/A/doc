1.关于排序
用位图表示集合（不重复的互异元素)，大大压缩了存储空间(数据压缩编码译码思想)
对于1000万个数排序,直接使用位图表示，存在数置1，直接输出有序,数据在文件中是无序的
但是位图是有序的，只是将存在的数置位置置1,顺序输出自然有序

用一种分发机制排序(基数排序中分发，收集多次后自然有序)
//init
for i=[0,n)
	bit[i]=0
//read file 
for each i 
	if i in the open(input file)
	bit[i] = 1
//write sorted 
for each i 
	if bit[i] == 1
	write i on the open(output file)



算法不用一蹴而就，可以逐步缩小范围，降低概率，在最后使用笨办法的代价也很小.

2.灵机一动解决问题,看似复杂的问题都有一个简单的解决方法
A. a数值排序->b二分搜索
B.
	向量循环移位
	//abcdef->i=4->efabcd
	//在不使用辅助空间下采用在某个位置反转
	//abcd|ef->dcba|ef-->dcba|fe-->efabcd
	loopshiftleft(i,n):
		reverse(0,n-1)
		reverse(0,i-1)
		reverse(i,n-1)

C.变位词识别，为变位词生成标识
1.按字典序对单词排序,生成标识,数字标识字母个数
miss - i1m1s2（-- my idea )hash(i1m1s2) 

3.数据视图决定程序结构

a 将控制与数据分离
b 用特殊强大的工具

6.性能分析
系统-->数据结构-->代码优化-->硬件加速
7.粗略估算
a 性能估计:通过小实验时间，估算一些操作时间
b 安全系数，对于自己的估算乘以2,4,6倍数，安全系数弥补自己知识的局限性
c 任何事情都应该尽量简单，但不宜过于简单 - 爱因斯坦
8.算法设计

a 最大子向量之和

	v1:
	maxsofar=0
	for i=[0,n]:
		sum=0
		for j=[i,n]:
			sum+=x[j]
		maxsofar=max(maxsofar,sum)


   v2:
   31 -41 59 56 -53 58 97 -93 -23 84	最大子向量，全为正时则为0-n-1
   存在负数,从0开始增长，整数使和增大，负数使和减小
   从0开始增长，如果跨越负数的代价小于前面正数获得的代价那么就不舍弃前面的正数，如果得到正数的价值大于付出，是不足值的，舍弃
   31-41<0 舍弃31 59+56-53>0值得,向后跨越,+58+97 

   maxsofar=0
   maxendinghere=0
   for i=[0,n):
	   maxendinghere=max(maxendinghere+x[i],0) #向后生长的价值,如果为负置0，舍弃前面所得
	   maxsofar = max(maxsofar,maxendinghere)
	
	#保存状态，避免重复计算

9.代码调优
性能监视，确定每个函数运行花费时间-->优化关键函数
:过早的不成熟的优化是灾难
:效率很重要时，对系统性能监视，优化消耗多数时间的少量热点代码
:代码调优是玩火，需小心谨慎

	k=(j+rotdist)%n;
	<==>
	k=j+rotdist
	if (k>=n)
		k-=n

	优化的二分搜索，减少一种比较
	l=-1;
	u=n;

	while l+1!=u
		m=(l+u)/2
		
		if x[m] <t 
			l=m
		
		#x[m]<=t
		else
			u=m
		p=u
	
	if(p>=n) || x[p]!=t
		p=-1
	

10.节省空间，数据压缩,会牺牲一些时间，将一些重要信息保存，通过计算恢复原数据


12堆

root=1
value(i)=x[i]
leftchild(i)=2*i
rightchild(i)=2*i+1
parent(i)=i/2
null(i)=(i<1) or (i>n)

15字符串

在文本中搜索单词，短语
	a 字符串匹配
	b 处理文本，建立索引 word --> (文档,位置)



最长重复子串:
	O(n^2)算法
	输入存储在c[0...n]中
	maxlen=-1
	for i =[0,n):
		for j=(i,n):
			if(thislen = comlen(&c[i],&c[j])) > maxlen:
				maxlen=thislen
			    maxi=i
				maxj=j
	
	int comlen(char *p,char *q)
	{
		i=0
		while *p && (*p++ == *1 ++)
			i++
		return i
	}

	后缀数组算法
数组a指向的包含了字符串每一个后缀
#define MAXN 5000000
char c[MAXN],*a[MAXN];
n=0
while(ch=getchar())!=EOF:
	a[n]=&c[n]
	c[n++]=ch
c[n=0]

首先输入一个字符串到c[]中，例如“banana”，读入时我们队指针的数组a进行初始化，使得每个元素指向输入字符串的相应字符，则元素a[0]指向整个字符串，下一个元素指向从第二个字符开始的数组后缀，等等。对于前面的输入字符串，该数组能够表示下面这些后缀：
a[0]:banana
a[1]:anana
a[2]:nana
a[3]:ana
a[4]:na
a[5]:a
如果某个字符串重复，那么她将出现在两个不同的后缀中，因此我们队数组排序以寻找相同的后缀，下面将上面的数组a进行数组排序，结果如下
a[0]:a
a[1]:ana
a[2]:anana
a[3]:banana 
a[4]:na
a[5]:nana
然后我们就可以扫描数组，通过比较相邻元素来找出最长的重复字串，如上为"ana"

for i=[0,n):
#比较相邻元素
	if comlen(a[i],a[i+1])>maxlen:
		maxlen = comlen(a[i],a[i+1])
		maxi = i
	print "%d:%s" %(maxlen,a[maxi])

