1.使用性能监视工具

判断素数
p1:
int prime(int n)
{
	int i;
#检验2-n-1
	for(i=2;i<n;i++)
		if(n%i==0)
			return 0;
		return 1;
}

p2:

#只检测2-sqrt(n)乘对称的,6*9=9*6
int root(int n)
{
	return (int) sqrt((float) n);
}

int prime(n)
{
	int i;
	int bound=root(n);

	for(i=2;i<=bound;i++)
	{
		if(n%i == 0)
			return 0;
		return 1;
	}
}

p3:

#减少开方运算，将能被2,3,5整除的数字特殊检验,避免3/4的开方
int root(int n)
{
	return (int) sqrt((float) n);
}

int prime(n)
{
	int i;
	int bound;

	if(n%2 == 0)
		return (n==2); #n能整除2 if n ==2 then return 1 else return 0
	if(n%3==0)
		return (n==3);
	if(n%5==0)
		return (n==5);


	bound=root(n)
	#只考虑奇数，偶数必然会在n%2==0
	for(i=7;i<=bound;i=i+2)
	{
		if(n%i == 0)
			return 0;
		return 1;
	}
}

p4:

将开方改为乘法 i*i<=n
int prime(n)
{
	int i;

	if(n%2 == 0)
		return (n==2); #n能整除2 if n ==2 then return 1 else return 0
	if(n%3==0)
		return (n==3);
	if(n%5==0)
		return (n==5);


#只考虑奇数，偶数必然会在n%2==0
#?? 每次乘比开方一次时间更优??
	for(i=7;i*i<=n;i=i+2)
	{
		if(n%i == 0)
			return 0;
		return 1;
	}
}


2.
awk -f awkfile file
awkfile控制对file处理
awk由模式动作组成:BEGIN,END是特殊动作,每一行匹配模式，执行动作

BEGIN {读取file第一行前}
模式  {动作}
END{处理了最后一行后}

5.劈开戈尔迪之结：复杂问题简单化
6.
	->和客户保持良好关系可以使生产率加倍

9. 通过计算机语言，可以使用文本描述一个对象(图片，表格...)，以便计算机处理

13.不重复随机取样

S:1-N生成M个不重复随机数
init set S to empty
while Size<M:
	T=RandInt(1,N)
	if T is not in S :
		insert T in S
		Size+=1

算法S如果M=N,则最后一个数胡乱猜测要猜测很多次，才能找到最后一个数字

避免猜测很多次数
Floyed:
	init set S to empty
	for J=N-M+1 to N :
	T=RandInt(1:J)
	if T is not in S :
		insert T in S
	else
		insert J in S

1..N产生M元随机序列
for i=1 to N :
	x[i]=i
for i=1 to M :
	j=RandInt(i,N)
	swap(x[j],x[i])

14.牛顿迭代

计算r=sqrt(a),r^2-a=0计算出零点
a 二分搜索
b 牛顿迭代 x[i+1] = x[i] - f(x[i])/f'(x[i])
f(x)=x^2-a x[i+1]=x[i]-x[i]^2-a/2x[i] = x[i] - 0.5*(x[i]-a/x[i])


15.选择,选择第k大(小)
基于划分来选择第k个
	10个元素选择第5小 1 2 3 |4| 5 6 7 8 9 10 ,|4|划分元素下标4 第四小的 前三个小于它后面大于它,所以第5大,在5-10中的第5-4+1=2大
	递归k=5-->k=k-|4|+1第二大         5 6 7 8 |9| 10  第5个位置, 5-8 ,在前半部分k=2不变。划分index>k（后半部分，需要重算)
