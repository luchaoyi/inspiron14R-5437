异步回调通信 server向client发起请求,大多数网络应用是client发起请求，server被动应答
传输层即以下处理通信细节一般是内核的一部分，应用层处理应用细节
ILP32模型 int,long,指针占32bit
LP64模型 long,指针占64bit,不能假设指针可以存放在int中	
考虑阻塞的系统调用被信号中断后是否需要restart


udp 无连接，数据包套接字，包含数据长度提供记录边界
tcp 面向连接，流套接字，无记录边界,提供确认，超时和 重传，序列号，RTT估算,流量控制等
	三次握手
		connect的发起导致发送syn
		listen状态的套接字将连接放入未完成连接队列回复ack+syn,
		connect发起端发送ack,连接建立,listen的一端将连接放入已完成连接的队列，连接建立,accept从已完成队列取出一个套接字
		
	四次挥手	
		首先调用close的应用执行主动关闭，该端的TCP向另一端发送一个FIN分节
		TCP的另一端收到FIN分节后发出一个ACK对FIN确认，并将EOF传递给应用进程接受缓冲区(like管道一端关闭放入EOF)
		应用进程读取到EOF时,获知通信结束，因此它调用close导致它的这一端发送一个FIN分节
		执行主动关闭的一端发送ACK确认这个FIN,主动关闭的一端发送ACK后进入TIME_WAIT时间
			如果被动关闭的一端没有收到自己发送FIN的ACK将重新发送FIN,在TIME_WAIT时间再次收到FIN将导致执行主动关闭的一端再次发送ACK保证最后连接的释放
			等待TIME_WAIT时间可以让此连接发送的一些还在网络中迷路的数据报失效(IP数据报有最大存活时间)，避免同样地址建立的连接中存在前身的数据报
		/*
		每一个消息都有确认ACK,SYN和FIN是标志开始和结束的特殊消息
		三次握手是第二次的ACK消息捎上了另一端的SYN消息,将四次握手合并为了三次握手
		四路挥手没有合并FIN和ACK是因为TCP需要支持半关闭状态，即一个方向的关闭，另一个方向还可以发送数据，而sctp不支持半关闭，因此三路终止
		*/
		
sctp 
	可靠像tcp,消息边界像udp
	两个套接字代表了两个通信端点，两个端点绑定了1-多个可用的IP地址，两个套接字的connect被称为联合，一个联合中有多个流,流有编号
			
	四路握手建立关联
		关联确认2路+cookie确认2路
	三路终止
	
套接字地址结构
	sockaddr_ 不同套接字有不同的地址结构，还有可容纳所有结构的通用套接字结构,传参时可强制转换为通用指针，使用时根据协议族转换为指定指针
		sockaddr_in IPV4 AF_INET
		sockaddr_in6 IPV6 AF_INET6
		为支持可变长度结构，在结构中包含指示长度的字段或长度作为函数的一个参数
		值-结果参数，调用函数时传递一个指针，指针指向内容为参数，返回将结果写入指针指向位置	
		
		字节排序函数，处理大小端转换
			小端 低位存储在起始地址(低地址)
			大端 高位存储在起始字节(高地址)
		字节操纵函数
			memxxx
			字节级别的填充，复制，比较 -> memset,memcpy+memmove,memcmp|bzero,bcopy,bcmp
		地址格式转换 p to n<->n to p; 字符串IP表达<->二进制数值格式IP
		不带缓冲的read/write是系统调用可使用select等轮询，but select等系统函数不可能了解带缓冲的IO缓冲区是否有数据
	
TCP
	socket返回sockfd,sockfd使用前需要绑定到套接字地址上
	connect，内核默认绑定一个地址,tcp connect激发三次握手建立连接
		非阻塞connect
			立即返回错误，三次握手继续进行，使用select监听描述符直到描述符就绪表明连接建立(连接建立描述符可读，连接失败描述符可读可写)
	
	bind sockfd<->套接字地址 
	listen 服务器从CLOSED->LISTEN状态，被动打开
		内核维护一个已完成连接队列(三次握手已经完成，syn+ack+syn)和未完成连接的队列
	accept 从监听套接字sockfd关联的已完成队列返回一个连接,返回值为已连接套接字sockfd
		非阻塞accept
			当用select监视listen返回时表明已完成队列有连接建立，如果立即调用accept则不会发送阻塞，当服务器没有及时取出已完成连接的sockfd，而此时客户端取消这个连接，sockfd被驱逐，假设此事已完成队列为空，调用accept则会阻塞,为避免此种阻塞使用非阻塞accept
	
	close  套接字置为关闭状态，引用计数-1,引用值大于0并不引发TCP四次挥手，如果主动引发四次挥手调用shutdown函数
	getsockname,getpeername可以获取套接字关联的套机字地址结构体
	read/write 读写sockfd	
	
	/x
	网络编程时需要考虑通信方的异常终止
	must慎重考虑长时间运行的系统调用被信号signal中断!!!
	x/
	多进程并发服务器must考虑waitpid,以及系统调用被信号中断问题,慢系统调用或永远阻塞的系统调用，当被信号中断时可能返回EINTR错误，有些内核自动重启某些这类系统调用
	
	解决数据格式问题
		将所有数据都作为文本串传递
		显式定义数据格式标准

udp
	recvfrom/sendto
	connect可指定udp套接字的收发地址可以提高效率，指定后使用read/write通信
		
IO多路复用
	select 
		select阻塞直到rlist,wlist,xlist注册的描述符事件发生或timeout,当r,w,x都为空时，select是一个us级别的定时器相当于精度更高的sleep
		套接字低水位标记是一个阈值，标记着至少有多少字节可读或至少有多少空间可写才认为套接字就绪(准备可读或准备可写)
		最大描述符有上限
	pselect 
		提供ns级别精度时间
		提供了sigmask,调用pselect时以原子操作安装信号屏蔽字，返回时恢复以前的屏蔽字
	poll在流上支持识别三类数据：普通数据，优先级带，高优先级
	
套接字选项
	getsockopt/setsockopt
	fcntl
	ioctl
	
主机名字:服务名字<->数字地址:端口号
	名字解析相关的函数在<netdb.h>，这些函数发生错误时不设置errno值而设置的是定义在netdb.h中的herrno全局变量	
	名字解析函数搜索本地文件或与提供相关服务的网络服务器通信	
	/etc/resolv.conf DNS服务器IP地址
	/etc/hosts 	  主机名<->IP地址
	/etc/services 服务名<->端口号
	/etc/protocols 协议
	/etc/networks 网络
	
IPv4&IPv6
	双栈主机
		ipv6可以以映射地址方式收发ipv4数据报 
		接受
			ipv4/6数据报发送到对应ipv4/6套接字，无需特殊处理
			ipv4数据报发送到了ipv6套接字，数据报中的ipv4地址被映射为ipv6地址,客户服务器交换ipv4数据报
			ipv4套接字只能接受ipv4数据报
		发送
			ipv4/6套接字发送对应ipv4/6套接字，无需特殊处理
			ipv6套接字指定一个ipv4映射的ipv6地址发送数据报则发送的是ipv4数据报
			ipv4套接字不能发送ipv6数据报
						

守护进程 
	不与控制终端关联的进程
	使用syslog函数输出消息，它把消息发送到syslogd守护进程
	daemon_init/daemon 将普通进程转为守护进程				
	
	syslogd守护进程
		读取配置文件/etc/syslog.conf(高版本linux下为/etc/rsyslog.conf)根据配置文件将不同的消息写到配置指定的文件中	
	inetd守护进程
		启动网络服务器守护进程的守护进程
		
高级IO
	设置超时
		alarm指定产生SIGALRM,信号中断打断IO阻塞
		select指定时间
		设置套接字选项，让套接字支持读/写超时
		
	recv/send 比read/write多一个flags参数支持更多针对套接字的操作
	readv/writev 分散读/集中写，writev多个缓冲区集中写只产生一个数据报，而调用多次write发送小分组可能会触发Nagle算法
	/*Nagle算法
		为减少网络小分组(小于MSS的分组)数量,算法要求一个tcp连接上最多只能有一个未被确认的小分组，在该分组ack到达之前不发送其他的小分组，tcp收集这些小分组，并在ack到来时以一个分组的方式发送出去*/
	recvmsg/sendmsg 
		功能最全的通用收发函数，可以替代前面的all收发函数
		辅助数据也称作控制信息，辅助数据使用recvmsg/sendmsg传送,unix domain socket传递描述符也是辅助数据,辅助数据由1-多个辅助对象cmsghdr结构构成
		
	ANSI C标准IO
		unix IO通常作为系统调用直接操作对象是描述符,标准库IO是c标准库IO操作文件流对象
		fdopen从一个fd创建一个FILE对象<->fileno从FILE对象获取描述符
		一般一个全双工套接字打开两个标准流，一个读，一个写
		标准IO库会用户空间自动执行缓冲，通常socket避免使用标准IO或设置不使用自动缓冲
				
unix domain socket
	sockaddr_un,地址是fs路径名
	uds有数据报套接字和流套接字两种类型
	uds可以实现进程间描述符传递，描述符不限类型,描述符作为辅助数据发送，发送描述符使描述符引用计数+1
	uds可以传递用户凭证(uid,gid)
	
ioctl
	设备驱动程序的管理和控制设备为应用程序提供管理和控制设备的接口，一些常规的功能如设备打开，关闭，读写等功能，这些功能一般每个设备都需要支持，内核可以提前为这些通用的功能预留接口由驱动实现，但不同的设备需要实现一些个性化的扩展功能时，内核不可能为每一个设备设置接口，因此扩展功能全部由ioctl函数实现
	ioctl(fd,cmd,...)为指定fd传递cmd命令和参数，驱动根据cmd执行对应操作
	
	sockfd支持的ioctl命令可划分为6类
		套接字
		文件
		接口
		arp缓存
		路由表
		流系统

路由套接字
	进程可以写路由套接字向内核发消息
	进程可以读路由套接字接受内核的消息
	进程使用systcl函数可以列出已经配置的接口和倾泄整个路由表
	
密钥管理套接字 IPsec 
	用于在进程间交换SA,SA是通信对等体间对某些要素的约定
		使用哪种协议（AH、ESP还是两者结合使用）
		协议的封装模式（传输模式和隧道模式）
		加密算法（DES、3DES和AES）
		特定流中保护数据的共享密钥以及密钥的生存周期等
		
/×
	IPsec协议 在IP层通过加密与认证提供安全服务
	SSL/TLS协议 在传输层提供加密与认证，工作在TCP层以上应用层以下
×/	
	
	
非单播
	单播 121通信，tcp只支持单播
	任播 一组中的一个
	多播 一组中的全体
	广播 全体
		
原始套接字 
	IP层以上,传输层以下
	读写ICMPv4,IGMPv4,ICMPv6等分组
	可以自行构造IPv4首部
	读写内核不处理协议字段的IP数据报	
	
/*
ICMP(Internet Control Message Protocol)网际控制信息协议
	差错报告报文 
		终点不可达、源点抑制、超时、参数问题和改变路由
	查询报文
		回送请求与回答
		时间戳请求与回答
		
IGMP（Internet Group Management Protocol)网络组管理协议，管理组成员关系

	成员关系报告报文 记录响应者在网络中的成员关系
	成员关系查询报文 查找网络中活跃的组成员  
*/

应用程序数据层链路访问
	三种方法
		BPF 
		DLPI 	
		linux 创建SOCK_PACKET套接字
	
	libpcap 分组捕获函数库 大约25个pcap_xxx函数  目前只支持读入
	libnet 分组构造与输出函数库 libnet_xxx


高级udp
	当udp数据长度超过接受缓冲区大小时,不同实现存在差异... ... ,因此可以总是分配一个比预期接受最大数据报多一个字节的缓冲区，如果收到了等于缓冲区长度的数据报则表明是一个过长的数据报.
		数据报被截断并返回MSG_TRUNC标志 or 
		截断但不告知 or
		保留超出部分下次返回
	给udp增加可靠性，需要在应用程序中实现
		超时，重传
		序列号

带外数据
	希望迅速通知对端，带外数据更高优先级，在以及排队的待发送数据之前发送
	tcp没有真正的带外数据不过提供紧急模式和紧急指针，tcp使用紧急模式发送1字节OOB数据，tcp OOB数据会在发送缓冲区排队，而不是最优先发送.
		发送端 
			当使用MSG_OOB标志发送数据时，发送端进入紧急模式，此时缓冲区中待发送的下一个TCP分节立即设置URG标志，并把紧急偏移字段指向带外字节之后的字节(即不立即发送OOB字节，而是立即告诉对端有OOB字节要发送以及位置)
		接收端
			指向同一个OOB字节的多个TCP分节，只有第一个到达的导致通知当收到URG标志分节,新的紧急指针引发SIGURG通知			
						
			设置了SO_OOBINLINE则OOB字节在普通的接收缓冲区,不能指定MSG_OOB标志读取，当接受到一个OOB字节时会有一个关联的带外标记，标记指定了发送端在发送OOB字节时该字节在发送端普通数据流中的位置,接受端调用sockatmark确定是否处于带外标记
			SO_OOBINLINE禁止则OOB字节放在专门的1B缓冲区，此时只能使用MSG_OOB标志读取带外字节,以下情况返回错误
				对端未发送带外字节
				OOB字节未到达
				多次读入同一个OOB字节
				设置了SO_OOBINLINE
							
信号驱动IO
	io两个阶段
		等待数据准备好
		从内核向进程复制数据
	两个阶段都不阻塞的是异步IO
	第一个阶段不阻塞的是非阻塞IO，非阻塞IO有信号驱动，轮询，IO多路复用
	
	套接字信号驱动IO
		建立SIGIO信号处理函数
		设置套接字属主
		开启信号驱动IO标志
	
	套接字哪些条件下产生SIGIO取决于具体协议实现
		tcp
			信号驱动IO对tcp近乎无用，因为引发SIGIO的情况很多因此频繁引发，而引发SIGIO时我们无法区分发生了什么
		udp
			数据报到达
			发生异步错误	
				
线程
	信号处理函数可类比线程，主执行流一个执行流，信号处理函数一个执行流，由各自的运行栈共享全局变量 
	/x
	信号处理函数和主执行流同一个时刻只有一个能执行，因此不可能并行,但可看作并发的，如Cpython的多线程不可能并行
	信号打断了主流程，转而执行另一个流程
	x/
	posix线程 
		线程标识 pthread_t类型 pthread_equal比较pthread_t是否相等,pthread_self获取自身标识
		创建线程 pthread_create 主线程创建其它线程，主线程退出可能导致进程终止，因此主线程需要等待其它线程结束
		线程终止 
			线程返回
			被其它线程取消
			pthread_exit
			
		脱离detach和汇合join 
			可汇合的线程终止时，它的tid和退出状态保留直到另一个线程调用pthread_join等待线程终止(类比waitpid)，脱离状态的线程不能被其它线程等待终止
			对脱离状态线程调用pthread_join会直接返回错误
			
		请求线程取消  pthread_cancel(thread)
			请求指定线程thread取消，thread是否响应取消请求以及如何响应取决于thread的设置
			可取消状态
				enable 表明响应取消请求
				disable 表明不响应取消请求
			取消类型
				异步取消，立即取消
				推迟取消，运行到指定取消点取消，posix规定部分函数调用时出现取消点(大部分为可能阻塞的函数)，还可以可调用pthread_testcancel自行设置取消点
			
CS设计范式
	每个客户现场fork子进程 适用于并发量小的服务
	预先派生子进程,并监视空闲的子进程，动态扩缩进程数量
		多个子进程accept|select同一个监听套接字，可能会引起惊群效应(一个连接到来唤醒所有进程，但只有一个能取得连接其它又投入睡眠，影响性能)
		accept前后加锁
		父进程accept后使用uds传递描述符到子进程,此方式编码更复杂
	每个客户一个线程
		可以由主线程accept，在创建线程时传递给子线程，因为共享进程空间因此传递开销很小
	预先创建线程
		线程加锁各自accept
		可以由主线程accept，在创建线程时传递给子线程
		
流系统
	流在进程和驱动程序之间提供全双工连接,驱动程序不一定和硬件设备相关可能是个伪设备驱动程序
	|驱动-> 处理模块0->...处理模块n ->流头| ->	进程
			(内核)                        (用户)
	流中每个部件至少一对队列(r&w)
	流消息按优先级排序 putmsg/getmsg/putpmsg/getpmsg用于读写控制/数据并提供优先级
		

	
	
		

	
		
	
	
	
	






		
