# -*- coding:utf8 -*- 
#S+=Sum(Ai*Wi);
#Ti[S%11]
import sys

"""
　由十七位数字本体码和一位校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。

　　地址码：表示编码对象常住户口所在县（市、旗、区）的行政区划代码，按GB/T2260的规定执行。
　　出生日期码：表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日代码之间不用分隔符。
　　顺序码：表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。
　　校验码：
　　1.将身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7. 9 .10 .5. 8. 4. 2. 1. 6. 3. 7. 9. 10. 5. 8. 4. 2. 2.
　　2.将这17位数字和系数相乘的结果相加。
　　3.用加出来和除以11，算出余数。
　　4.余数只可能有0 、1、 2、 3、 4、 5、 6、 7、 8、 9、 10这11个数字。其分别对应的最后一位身份证的号码为1 .0. X. 9. 8. 7. 6. 5. 4. 3. 2

"""
class IdentityCard:
    def __init__( self ):
        self.__Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]
        self.__Ti = ['1', '0', 'x', '9', '8', '7', '6', '5', '4', '3', '2']

    def check( self, code ):
        if (len(code) != 17):
            print "必须为17位的字符"
            return False
        return True
        
    def calculate( self, code ):
        sum = 0
        for i in range(17):
            sum += int(code[i])*self.__Wi[i]
        return self.__Ti[sum%11]
        
def test():
    ic = IdentityCard()
    61032619940618121
    code = "61032619940618121" #17位身份证
    if ic.check(code):
        print "你的校验位为:%s"%ic.calculate(code)
        
if __name__ == '__main__':
    test()
