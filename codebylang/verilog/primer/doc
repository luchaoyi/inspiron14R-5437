HDL:use language describe hardware struct
verilog用于仿真建模和硬件描述。部分仿真建模语句不能综合，不能用来描述硬件电路.
verilog：可综合与不可综合的，可综合是可以转化为实际网表的形成硬件结构的，不可综合的分为由于技术制约而不能综合的语句(综合器技术)，和用于仿真不能综合的语句。verilog：支持不同层次抽象建模（系统，行为，数据流,门，开关),一般电路设计在RTL级
，RTL综合生成门级网表，（类比:C语言->汇编),自动生成的是近似最优的，为提高性能，可以在核心部分用门级建模(类比:汇编语言优化核心代码)
触发器:沿触发，电平触发
RTL:指可综合的行为，数据流混合描述。

module，基本功能块
module m_name (input ... ,
		...,
		output...);
...
endmodule
模块内部不能嵌套定义模块

数字:4'b1111,默认十进制
数据类型:对硬件建模.
	值有4逻辑，0,1,x,z,8种强度。
	wire:由连接输出端连续驱动.
	reg:保存值的存储单元，可以被随时改变，不需要时钟，不对应触发器构成的寄存器.
	parameter：模块内定义常数，可以使用defparam重载.（类比:c++ const定义常变量)

系统任务:仿真器提供的支持仿真操作$task.
编译指令:支持编译处理的`define,`include ...
inout类型:硬件实现使用三态门。 assign dataOutBus=data输出en?oataOut,zz,输出使能驱动dataOutBus输出数据,不输出时总线处于高阻态，此时可以使用reg从总线输入数据.
Inout DataBus；
Assign DataBus=（Control[0]==1）？DataOut：32'bz；//位宽由实际情况决定输入缓冲
Reg DataIn;
Always @（Control[1]）
    If（Control[1]）
        DataIn<=DataBus；

Verilog提供了预定义门级原语，(and,nand,...等被定义为了关键字，提供了内置支持)当一个信号被多个信号源驱动时，使用带使能端的门，可以将有效时间错开，避免竞争。

assign:连续赋值
	对wire赋值，wire可以声明时赋值不使用assign,可以直接assign隐式声明.
	赋值延迟，对于输入脉冲宽度(输入信号保持时间)，小于赋值延迟，则对输出不会产生影响。

verilog中的逻辑:非0真，0，存在x，z假

操作符:
	==
	！=
		逻辑等不等出现x,z则运算结果不确定

	=== 
	！==
		case等不等,精确逐位匹配

	>>>
		算术右移，填充符号位

	{}
		{4{A},5{B},C} 重复，拼接.

过程赋值:
	非阻塞赋值<=:仿真器将语句调度到仿真时刻并发执行.
	阻塞赋值=:一个块语句表现为串行.前面执行阻塞后面执行.

`timescale 100ns/1ns;//定义测量单位100ns,取整进位精度1ns;1,10,100才是合法的

udp:
	用户自定义原语，使用真值表形式，定义原语逻辑。可以定义组合和时序原语.
	?在table中表示无关项,不care无论取0,1,x都不影响输出。z不出现在udp中输入端z被看作x.
	udp,小而美，不适合输入太多，只支持一个输出。

PLI:
	仿真器提供PLI支持用户使用c语言对仿真器功能扩展,扩展系统任务函数,对仿真环境进行操作。
    Verilog仿真在仿真器运行，模型信息存储在内存中。仿真器将模块等看做一组对象类型.
	存取PLI:PLI函数，操作仿真器内部数据结构。
	实用PLI:传送数据，日常维护.

RTL翻译到逻辑门，逻辑门是概念上门，没有时序，面积，功耗等信息。生产实际IC芯片时，选择某厂商的某个工艺生产，就使用某个厂商的某工艺库，
工艺库描述了基本单元的时序，面积，功能，功耗等信息。在特定设计约束下，采用特定工艺，进一步得到优化的门级表示.

电路综合时应避免产生锁存器的设计。

简单数字电路设计:
	真值表->卡诺图化简->逻辑表达式
组合逻辑避免毛刺方法是增加冗余项,涵盖了卡诺图所有临近项基本可以避免毛刺.

for循环综合器直到循环次数，根据次数可以生成相应个数电路实例(资源耗费大),对于次数不定的循环如while等，不能被综合。
while等循环可以转化为状态机，可以综合且，节省资源.
--------------
现代逻辑设计
