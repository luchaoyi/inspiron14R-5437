函数式三基本单元
	filter 返回满足条件的元素组成的一个更小的list
	map 
	reduce
			
函数编程特性	
	接受函数输入和返回函数
	函数闭包(functor) 函数为第一类对象
	惰性求值
		推迟求值到使用时
	递归取代循环
	引用透明性
		同样输入产生同样输出，线程安全的，结果可预测的，一次求值则下次使用时可以直接用值替换函数
		函数式推崇纯函数，避免函数副作用
	抽象模型主要是为计算，不考虑io(实际应用还得考虑io)
	函数柯里化
		函数部分施用，可一步一步的配置参数,高阶函数中可以配置返回不同的函数，可以充当函数工厂
	函数组合
		通过组合已有函数来实现代码重用,即函数式编程抽象出共同行为
	map/reduce/filter
		迭代让位于高阶函数
	尾递归优化
		递归代替迭代,使用尾递归,栈不增长
	不可变性
		不修改原值，生成新值
	管道流式计算/链式调用
		->data fa fb fc == fc(fb(fa(data)))
	基于模式匹配的分发机制
		动态的选择行为
	一切行为是函数
		scala语言运算符与函数没有区分，运算符只是名字特别的函数
