web app 三层架构
	UI
	业务逻辑层
	数据访问层

数据库产品三层架构
	应用层 负责和客户端建立连接和交互
	逻辑层 查询处理，事物管理，存储管理，恢复管理
	物理层 磁盘上的数据文件,日志文件等

查询计划 优化器解析SQL语句计算出最优的执行路径
权限 ip，用户名，密码验证身份,每个身份赋予不同的权限

短连接 每一次操作数据库,都要打开和关闭数据库连接
长连接 可以节省创建连接的开销,但维持连接也是需要内存的,长连接的使用一定要慎重,不可滥用
由于数据库只能接受有限的读请求。对于读请求较多的应用,数据库可能会成为瓶颈.因此引入了读写分离的技术。比如,利用复制技术配置多个从库,以承担更多的读请求。


实体 代表现实世界的一组对象集合
关系 特定实体之间的关系
JSON 
	成为了一种前端与服务器端的数据交换格式
	前端程序通过 Ajax 发送 JSON 对象到后端,服务器端脚本对 JSON 进行解析,将其还原成服务器端对象,然后进行一些处理,反馈给前端的仍然是JSON对象
	
字段类型选择指导原则
	各表使用一致的数据类型
	小往往更好
	简单类型更好
		使用 MySQL 内建的类型来存储日志时间会更好
		使用无符号整型来存储 IP 地址
	尽可能避免 NULL 值
		如果查询涉及的是 NULL 值的字段, MySQL 会很难去优化查询,可使用 0 、空字符串或特殊的值来代替 NULL 存储
		
第一范式是指数据库表的每一列(属性)都是不可分割的基本数据项
第二范式数据表里的所有数据都要和该数据表的主键有完全相依的关系
第三范式的所有非键属性都只和候选键有相关性,一般我们所说的候选键指的就是主键
反范式try通过增加冗余数据或通过分组数据来优化数据库读取性能的过程,反范式是解决数据库性能和可伸缩性的极佳策略
先创建一个完全规范化的设计,然后为性能原因选择性地对一些表进行反范式化设计,设计的数据库应该按照用户可能的访问路径、访问习惯进行设计,而不是严格地按照数据范式来设计

数据库索引 数据库管理系统中一个排序的数据结构,用于协助快速查询、更新数据库表中的数据
慢查询日志 常用的性能分析工具,可以用来定位执行时间很长的查询重点优化

事务和锁
	用户需要修改数据库中的记录时,首先要获取锁,只有这样该用户在锁的持有期间,其他用户就不能对这些记录进行修改了	
	事务是数据库管理系统执行过程中的一个逻辑单元,由有限的操作序列构成，事务隔离级别越高,越能保证数据的完整性和一致性,但是对并发性能的影响也会越大
	
产生死锁有 4 个必要条件
	禁止抢占( no preemption )
	持有和等待( hold and wait )
	互斥( mutual exclusion )
	循环等待( circular waiting )
	
开发技巧
	存储树形结构
		路径枚举 增加一个path字段以字符串形式记录所有祖先信息 path=1/2/3 
		闭包表 额外增加一张表来记录节点的父子关系

	处理重复值
		主键约束
		唯一索引
		INSERT IGNORE  有重复冲突,INSERT IGNORE 告诉 MySQL 丢弃这条记录,且不报错
		REPLACE  新的记录覆盖掉旧的记录

	处理 NULL 值
		NULL 值与任何其他值的比较(即使是NULL)永远都不会为 “真”
		使用 IS NULL 和 IS NOT NULL 操作符
	
	存储URL
		域名可按颠倒顺序存储 com.baidu.www，可方便索引
		对url散列后存储
		
查询优化
	MySQL 的优化有两个方向,一个是让 SQL 语句执行得更快,一个是让数据库做更少的事
	减少对数据的访问 
		缓存数据
		指定列，避免select *
		limit行 避免查询多使用少
	重写 SQL 
		把复杂的查询分解为多个简单的查询
		避免连接太多表,对于严重影响性能的SQL,建议在应用层就实现部分连接的功能,这样可以更方便、更高效地缓存数据,方便迁移表到另外的机器,扩展性也更好
		绝大部分情况下,连接会比子查询更快
	反范式设计
	优化好索引
