线程
	grid内block,block內thread wrap,block是进程级别，thread wrap是线程级别，一个block内的thread共享内存且可以sync
	通常grid是二维，block是三维
	kernel 是异步launch,某些cuda api是隐式同步的
	硬件SM
		cuda core,shared mem, regfile,LD/ST, sfu, wrap调度器
		block 调度到SM上执行,block的thread被划分为wrap调度执行，一次并行一批wrap，block内可同步
		同时存在于相同SM中的线程块和线程束的数量受资源约束(共享内存、寄存器等)
		!*SIMT有SIMD没有的的关键特征*!
			每个线程都有自己的pc
			每个线程都有自己的寄存器状态
			每个线程可以有一个独立的执行路径
		并发内核
			同时启动多个内核，Fermi架构允许16个内核同时运行，并发内核使GPU表现得更像MIMD架构*
			kepler 架构
				动态并行 允许GPU启动新的内核
				主机与GPU之间提供了32个硬件工作队列
			线程切换开销仅1-2 cycle
	分支
		同一wrap内线程执行路径不同将导致串行，不同warp线程无影响
		短分支会被优化为cond 指令，不会分化
		循环展开在cuda中有很明显的优化
	延迟隐藏
		指令延迟
			compute  算术操作从开始到它产生输出之间的时间 10～20 cycle
			io 送出的加载或存储操作和数据到达目的地之间的时间 400～800 cycle
			使用大量的活跃线程束隐藏延迟，打满硬件 #带宽很大，计算(流水线多)吞吐量大，需要大量的线程才能使硬件始终忙碌，带宽占满
			例子:
				内存bandwdith 144GB/s / 1.566GHZ = 92B/cycle
				io指令执行周期 800, 800个cycle内存可以传输74KB的数据，而如果一个活跃线程在800 cycle仅执行一条float 类型数据的io指令仅能利用4B，而74KB / 4B = 18500个线程可以将带宽打满
		占用率 *
			调整线程块配置或重新调整资源的使用,使更多的线程束同时活跃可以提高计算资源的利用率
			大线程块 block数量少，大量线程挤在一个SM上，导致每个线程资源很少，而某些核由于得不到block而闲置
			小线程块 block数量特别多，可能导致资源未充分利用下到达wrap的数量限制
	同步
		__syncthreads 同一个线程块 #增加tensor core的新架构可以对一个wrap同步
	
内存
	host <-> device
		cuda6.0后，有了“统一寻址”(Unified Memory),单个指针访问CPU和GPU内存
	局部性
		时间局部性	一个数据位置被引用,那么该数据在较短的时间周期内很可能会再次被引用,随着时间流逝,被引用的可能性逐渐降低
		空间局部性	一个内存位置被引用,则附近的位置也可能会被引用
	存储层次
		reg
			寄存器使用超量会产生溢出
		本地内存
			动态数组或结构体reg不能承载的,可能溢出到缓存或ddr
		sm|l1 cache
		const
			in ddr,有缓存对应加载优化访问速度,64KB限制
			线程束中的所有线程从相同的内存地址中读取数据时，会广播给线程束里的所有线程
		全局内存
			静态声明 __device__ 声明在全局变量位置，host和device的函数都可以看到
				对于device 代码直接是变量，可以正常使用
				对于host只是一个symbol，需要使用symbol相关的runtime api操作
			动态申请 cudaMalloc/cudaFree
	host-device
		gpu device band width 144G
		cpu - gpu pcie 8GB ; 减少host and device 数据copy
		GPU只能和主机锁页内存数据传输*
		固定内存可映射到device空间，无copy（适合1次性少量数据访问）
	UVA统一虚拟寻址 同一个地址空间，指针无区分host和device
	统一内存寻址(CUDA 6.0)
		托管内存池,已分配的空间可以用相同的内存地址(即指针)在CPU和GPU进行访问,底层系统UVA自动在主机和设备之间进行数据传输,传输对应用程序是透明的
	内存访问
		对齐 32B/128B的偶数倍
		一个wrap内线程访存连续，合并访存
	wrap对SM访问
		一个线程束访问的多个地址落在多个存储体，无冲突   
		线程束中32个线程全都访问同一存储体中不同的内存地址，则bank冲突，串行访问
		线程束中所有的线程都读取同一存储体中相同的地址,广播访问
		配置
			·当核函数使用较多的共享内存时,倾向于更多的共享内存
			·当核函数使用更多的寄存器时,倾向于更多的一级缓存
	shuffle instruction
		两个线程在相同的线程束中,则这两个线程可以直接读取另一个线程的寄存器，wrap中的线程可以直接交换数据
