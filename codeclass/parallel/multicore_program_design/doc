多核程序设计|多核系列教材组|清华大学出版社
----
软件|
-
固件| 固件:烧写在存储介质中长期存储的软件
-
硬件|
----
SMP的全称是"对称多处理"（Symmetrical Multi-Processing）技术，是指在一个计算机上汇集了一组处理器(多CPU),各CPU之间共享内存子系统以及总线结构。



程序优化

进程间通信有3种形式
	通信:数据传递
	同步:多个进程相互等待
	归约:综合多个进程局部结果
	共享存储环境下进程通信，通过读写共享数据存储区实现，分布式环境下进程通信，通过网络通信。具体细节对用户屏蔽，用户看到的是统一的API
	
	
线程
	进程是资源分配和保护的实体，线程是进程中被调度执行的实体
	线程是轻量的，创建，切换开销小，数据共享，因此适合细粒度并行
	进程优点是互相独立，一个进程死掉对其它没有影响(e.d.谷歌浏览器是多进程的每个标签页是独立进程，失效不影响浏览器其它页面)缺点是共享数据需要显式控制，操作开销大。
	多线程优点，数据共享容易，cache命中率高，缺点is一个线程失败则进程终止.	

	
	用户级线程
		os内核不能感知用户级线程存在，当内核调度某进程运行，用户级线程库调度该进程的用户级线程执行，多个用户级线程共享该进程的时间片。
		若此进程的一个线程系统I/O读写，通过系统调用进入内核，则该进程会内核被阻塞，内核不能感知进程中的用户级线程，因此即使该进程其它线程可以运行，也仍然被阻塞，因此用户级线程并行性受到一定限制.
	内核级线程
		内核级线程由os kernel管理，因此当内核级线程被阻塞，内核可以调度其它内核级线程执行。在多处理器系统上，内核可以调度多个线程在多个处理器上运行，提高进程并行度.
	用户级线程由用户级程序库管理内核不知道，因此创建，管理操作快,因此也不能享受内核调度福利.
	内核级线程有内核管理，操作相对慢，但比进程快.
	某些操作系统可以将用户线程映射到内核线程，内核线程数目决定了线程并发度.
	
	线程池
		一组被创建的线程集合，避免重复创建和销毁线程，使用时从中取出，使用完归还到线程池（有备无患）。
		
	多线程环境下的进程
		创建fork
			单线程下，fork复制进程内容。多线程下有
				单线程复制，即子进程只复制了调用fork的线程
				多线程复制，即子进程复制所有线程
			不同系统有不同的实现,单线程fork更高效
		执行
			执行无大变化，exec终止所有sub进程的线程，然后新程序覆盖sub进程地址空间
		结束
			sub进程任一线程执行exit或主线程return则sub进程结束
		信号发送
			同步/异步向sub进程发送信号，可以向特定线程发送或向all线程发送
			
	线程同步
		同步就是协同步调，按预定的先后次序进行运行.敏感数据不允许被多个线程同时访问，使用同步访问技术，保证数据在任何时刻，最多有一个线程访问，以保证数据的完整性.
	
	死锁：
		资源申请环状等待会造成死锁。可以调整资源申请顺序避免，也可以非阻塞方式则获取锁失败后释放已经拥有的锁。
	
	
POSIX.Pthreads
	pthread库不是Linux系统默认的库，连接时需要使用库libpthread.a,因此使用pthread_create创建线程时，需要在编译时-lpthread,e.g. g++ hw.cpp -lpthread -o hw
	线程属性
		线程属性有一组操作函数(init,destory,setter,getter),线程属性有
		detachstate,分离，可加入
		schedpolicy,实时，轮转，...
		schedparam,调度参数，设置线程优先级
		inheritsched,
		scope,调度竞争范围
	线程互斥和同步
		mutex
			init,lock&trylock/unlock,destory
		cond
			条件变量,某个条件满足后发出信号通知另一个线程，另一个线程可以处于挂起状态，等待某条件满足后才继续exec
				
		posix信号量
		
		信号，SIG_*s
	
	
	
	gdb
		gcc -g can append symbol to debug
		n is next ,step over 
		s is step,step into	
		b is breakpoint
		list is list source
		print and display can display value
		thread command can switch thread
	
		
OpenMP
	并行块外的声明的变量默认是共享的，并行块内的局部变量默认是线程私有的，parallel for的循环控制变量虽声明在并行块外且没有显式修饰，但依然是线程私有的.
	循环并行化，需要确定的循环次数，不能使用使循环次数不确定的语句(goto,return,break等)
	
	#pragma omp parallel 并行块内代码被复制到各个线程执行相同任务
	#pragma omp parallel sections 工作分区，每个section执行不同任务
	#pragma omp parallel for 并行循环
	
	互斥
		原子操作atomic,原子操作对应与平台硬件机制，因此所执行操作有限，速度快
		critical临界区
			#pragma omp critical [(name)]
				{
				   <临界区代码>
				}
			critical的语义是指在任意时刻只有一个（或是最多一个）线程在执行临界区内的代码， 其目的是对于临界区内的线程之间共享的资源进行保护，比如几个线程对一个公共链表进行插入或删除操作，此时就需要使用critical, 否者该链表中的数据可能不一致。
			在OpenMP中，临界区的名字是可选的，所有的临界区都是外部链接的，也就是说是他们是公共变量，是所有线程可见的，不管该线程属于哪个组。
			对于没有指定名字的临界区，OpenMP编译时认为所有的没有指定名字的临界区，都对应一个外部（或全局）的临界区。即所有未命名临界区的代码相当于在一个临界区中包含，这些所有代码每次只能被同一个线程串行。若不同命名临界区，虽然每次代码只允许一个线程执行，但是不同线程可以同时执行不同命名临界区的代码.
			不同于一些常见的OpenMP结构语句，临界区结构的末尾并没有一个隐含的同步路障。临界区的代码应该是一个块结构（structured block）, 其中不允许有返回(return)， 退出（exit）, 或者从里面跳出(go to)语句。
		
		互斥锁
			lock
			nest_lock，嵌套锁，允许同一个线程获得多次，用于支持递归.
		
	同步
		不同parallel,parallel sections,parallel for隐含barrier,私有nowait取消隐含barrier
		#pragma omp barrier 显式插入barrier
		
		
		
		
	高效OpenMp准则
		并行不够好，则用串行，如循环次数较少，使用串行，因为线程开销大于优化部分.
		并行结构间有隐式同步点，当不需要同步时使用nowait指明	
		collapse语句可以折叠循环层数
			
MPI
	消息数据类型
		MPI_*,c类型无对应的类型
			MPI_BYTE,无类型数据，不加修改的发送二进制字节流
			MPI_PACKED,打包数据
			
	TAG:区分同一接收者的不同消息
	通信域
		包含一个进程组及其contex,一个进程组在此通信域的contex可以互相通信
		MPI_Comm_size,MPI_Comm_rank可以获得组进程数和current进程ID,MPI实现预定义了
			MPI_COMM_WORLD 包含本次启动的所有进程
			MPI_COMM_SELF 只包含自身
		通信域管理API包含了，compare,dup(duplication),split，free操作
	MPI_Status 状态字，保存接受到的message的status
		包或接受的消息的source,tag和实际接收的消息长度等.
	
	MPI通信
		p2p 
			recv&send的p2p通信关键在于正确匹配src,tag,data type等
		群通信
			同步 MPI_Barrier(MPI_Comm comm)

			广播 int MPI_Bcast(...,int root,MPI_Comm comm),root进程向comm所有进程发消息
			播撒 int MPI_Scatter(...)不同于广播，广播是同一消息，播撒向不同进程传递不同消息
			收集 int MPI_Gather(...,int root,...)root 接受组内成员(include self)发送的message
		
	MPI聚合操作
		归约 MPI_Reduce,op指定操作，有max,min,sum,prod,...
		扫描 MPI_Scan
		
	
	



