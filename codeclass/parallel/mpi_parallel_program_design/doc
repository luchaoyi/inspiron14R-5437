MPI并行程序设计|都志辉|清华大学出版社

进程可表示为(P,C,D,S)，即程序、进程控制状态、数据、执行状态
进程间互操作有
	通信，消息传递
	同步，多个进程相互等待
	聚集，多个进程局部结果综合，如求max,min,sum等(reduce操作.)
		
OpenMP是共享内存编程，是细粒度并行
MPI是消息传递编程，是大粒度的进程级并行

MPI
	MPI是一个跨语言的通讯协议，MPI是一个信息传递应用程序接口，包括协议和和语义说明，他们指明其如何在各种实现中发挥其特性。消息传递接口是一种编程接口标准，不是具体的编程语言，MPI标准定义了一组具有可移植性的编程接口。
	
MPI_COMM_WORLD是通信域，协同进程在同一个通信域，同一个通信域可以通信.
	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD,&myid); //获取进程标识id
	MPI_Comm_size(MPI_COMM_WORLD,&numprocs);//获得处理器个数等
	MPI_Finalize();
	//				 发送消息个数，发送消息类型
	MPI_Send(message,strlen(message)+1,MPI_CHAR,1,99,MPI_COMM_WORLD);  //发送消息
	//               接收消息最大个数，接收消息类型
	MPI_Recv(message,20,MPI_CHAR,0,99,MPI_COMM_WORLD,&status);//接受消息 status 类型为 MPI_Status  

MPI 数据类型 | C数据类型
MPI_CHAR Signed char
MPI_SHORT Signed short int
MPI_INT Signed int
MPI_LONG Signed long int
MPI_UNSIGNED_CHAR Unsigned char
MPI_UNSIGNED_SHORT Unsigned short int
MPI_UNSIGNED Unsigned int
MPI_UNSIGNED_LONG Unsigned long int
MPI_FLOAT Float
MPI_DOUBLE Double
MPI_LONG_DOUBLE Long double
MPI_BYTE 无相应数据类型
MPI_PACKED 无相应数据类型
MPI_LONG_LONG_INT Long long int



MPI消息
	信封:src/dest ,tag ,通信域
			tag区分同一src的不同消息
			MPI_ANY_SOURCE 和 MPI_ANY_TAG 可以接受任何来源的任何标识信息(通配)
			通信域:包括进程组和通信Context,
				进程组包含此通信域的所有进程，以标识区分
				通信Context提供一个独立的通信环境，不同消息在不同Context传递.
				MPI_COMM_WORLD预定义的通信域，由MPI_Init产生，包含了所有进程。
				可以定义新的通信域，对通信进行封装.
				MPI_Abort(),使通信域中所有进程退出
	数据:
		address
		count
		datatype
		
MPI并行程序设计模式:大部分MPI程序是对等模式和主从模式之一或二者组合.
	对等模式	
		MPI_PROC_NULL虚拟进程，不存在的假想进程，真实进程向虚拟进程发送消息或从虚拟进程接收消息将立即返回.引入虚拟进程可以方便编写通信语句(如，use一致的代码处理边界条件)
		对等模式各个进程对等，因此可能互相通信.
	主从模式M/S
		M/S模式，一般主进程和从进程互相通信，各个从进程一般不需要通信.

MPI通信模式
	标准，是否对数据进行缓存由MPI自身决定,若缓存则缓存完毕返回，若不缓存则接受完毕返回
	缓存(+B)，用户直接对通信缓冲区申请，使用和释放
	同步(+S)，同步发送必须等到相应接收进程开始后才能返回，因此同步发送返回意味着发送buffer的数据已经全部被系统缓冲区缓存，且已经开始发送了.这样同步发送返回后，发送缓冲区可重新使用或释放
	就绪(+R)，当接受操作已经启动时才可以发送数据

阻塞通信与非阻塞通信
	阻塞通信和非阻塞通信都有消息顺序约束，即同一匹配的消息(source,tag)先发送的消息先被匹配接收,后发送的先到达它也要先等待接收先发送的消息
	非阻塞通信可以折叠通信与计算的时间,非阻塞通信函数返回不意味接受或发送完成，因此需要引入新手段可以知道消息是否已经成功发送和接受消息是否已经完全到达
	MPI提供非阻塞通信的完成检测方法和完成方法
	非阻塞通信API多了一个MPI_Request对象，此对象描述通信状况，通过查询此对象可以知道非阻塞发送/接受是否完成.
	
	非阻塞通信模式
		IS,返回意味接受已经启动，不代表发送完成
		IB,
		IR,启动调用前，接受操作已经启动
	MPI_Wait(request,status),等待直到非阻塞操作完成，相当于手动阻塞
	MPI_Test(request,flag,status),立即返回,只填写flag来告知操作是否完成
	MPI_Probe and MPI_Iprobe 可以不执行接受动作，探测消息是否到达并得到status信息.即只访问了消息，没有移动消息到接受缓冲区
	
	
组通信
	Bcast,Barrier，Scatter/Gather
	Alltoall，全互换，每个进程Scatter一个消息到其它进程，每个进程Gather一次其它进程Scatter的消息
	
	Reduce
		Reduce的op操作还可以自定义,定义一个操作函数，使用MPI提供的创建op的函数,令MPI系统创建一个op操作，不使用时可以使用MPI的函数释放创建的操作.
	AllReduce，组归约，所有进程都执行了Reduce
	Scan，扫描，前缀操作
		0 1 2 3 4 5
		->
		0,op(0,1),op(op(0,1),2),...
		-> 
		0 op(0,1),op(0,1,2),op(0,1,2,3),op(0,1,2,3,4,5)
		第i个进程接受缓冲区的值与第i+1进程发送缓冲区的值形成第i+1接受缓冲区的值,第0个进程接受缓冲区值与发送缓存区值相同.
	
		
MPI派生数据
	类型图={<基类型，偏移>,...},可描述任意类型.e.g.
		MPI_INT={<int,0>},MPI_DOUBLE={<double,0>}
	派生类型
		产生新类型
			MPI提供通过对原类型进行复制，组合的生成新类型的方法
		提交新类型,新类型生成后向MPI系统递交，递交后可以作为一个基本MPI类型
		释放新类型,可以释放不再使用的已递交的MPI类型
		
	pack and unpack
		不连续的数据可以组合新类型来发送/接收，也可以将一系列数据一次或多次使用MPI_Pack()打包到一个缓冲区，以MPI_PACKED类型发送，接受方可以以任意数据类型接收，只要和实际的消息数据类型匹配。
		以任意类型发送的数据(包括MPI_PACKED)都可以以MPI_PACKED类型接受，然后使用MPI_Unpack()解包.
		MPI_Pack_size可以得到对一组类型打包所需缓冲区字节上界.
		
	打包解包的缓存区是一个字节缓冲区(如定义为char buff[100],100字节大小缓冲区,不代表存储字符类型)无类型含义
	打包时提供类型信息，和数量信息，将数据写入此缓冲区
	解包时根据类型信息，将字节缓冲区二进制数据解析为对应类型的数据
	


通信域
	包含通信context,进程组，虚拟处理器拓扑，属性等.分为
		组内通信域,同一组内进程间通信
		和
		组间通信域,不同进程组的进程间通信。组间通信域包含两个进程组，实现两个不同进程组之间的通信，调用进程组为本地组，另一个组为远程组
	
	属性
		通信域可以创建一个属性来附加在通信域为通信域，可以给创建的属性指定copy和delete回调函数，则此属性在发送copy和delete时函数被调用。
	并可以通过Get和Put操作为此属性指定值和查询值
	
	
虚拟进程拓扑
	为进程设置拓扑结构，可以设置为网格形状的笛卡尔拓扑和任意形状的图拓扑,MPI拓扑只能附加在组间通信域
	笛卡尔拓扑
		笛卡尔拓扑，创建一个ndims的处理器阵列,每一维长度为dims[i]。(总处理器个数为dims[0]*dims[1]*...dims[n-1])
		笛卡尔拓扑相当于定义一个n维网格，在网格中每一个节点是一个进程有唯一坐标(x0,x1,...xn-1),笛卡尔坐标可以和进程rank互相转换
		
		int MPI_Cart_shift(MPI_Comm comm, int direction, int disp, int *rank_source,int *rank_dest)
			笛卡尔拓扑结构中,给定一个数据平移的维度和步长，返回数据平移的源进程号和目的进程号。
			参数：
			comm：具有笛卡尔拓扑结构的通信器
			direction：数据平移的维度号
			disp：数据平移的方向和步长，大于0表示正方向，小于0表示负方向
			rank_source：源进程号
			rank_dest：目的进程号
			e.g.
			若无周期性右移1则,0 1 2-> |-1 0 1|,此时若调用是0,则rank_source=-1(-1代表MPI_PROC_NULL)意思是移动到0此位置的是-1进程,即来源，而rank_dest=1,代表者0移到了的目标位置以前是1。		  |0 1 2|		
			即进程移动后知道自己占据了原来哪个进程的位置(rank_dest目的地),自己的位置被哪个进程占据(rank_source)，则移动1可以得到当前进程的左右两侧进程的标识。	
			有周期性则是循环移位。
			
	图拓扑
		创建图拓扑需要指定，节点数，节点的度(节点的边数量，即此节点邻接节点数)，和一个edges数组，存储节点邻接点，根据度从edges中取出相应个数的邻接点生成边.
		

MPI-2
	动态进程管理
		运行时动态创建新进程
	窗口s
		进程在本地存储创建一个窗口，其它进程可以直接访问该窗口.
		可以对从远程窗口读，也可以写入远程窗口，也可以实现对本地数据和远程窗口数据实现某种op后结果写入到远程窗口
		窗口是组进程共享区域，因此需要互斥机制.
	并行I/O
		MPI多进程文件操作	

